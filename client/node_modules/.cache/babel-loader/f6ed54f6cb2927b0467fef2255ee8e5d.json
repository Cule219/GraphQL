{"ast":null,"code":"import _slicedToArray from \"/home/i/code/Miami/graphql-playlist/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/i/code/Miami/graphql-playlist/client/src/componenets/AddBook.js\";\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getAuthorsQuery } from '../queries/querie';\nexport default function AddBook() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        genre = _useState4[0],\n        setGenre = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        authorId = _useState6[0],\n        setAuthorId = _useState6[1];\n\n  const _useQuery = useQuery(getAuthorsQuery),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const changeHandler = e => {\n    let state = [];\n  };\n\n  console.log(data, error);\n  return React.createElement(\"form\", {\n    id: \"add-book\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Book name:\"), React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Genre:\"), React.createElement(\"input\", {\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Author:\"), React.createElement(\"select\", {\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, loading && React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Loading...\"), error && React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Error :(\"), data && data.authors.map(x => React.createElement(\"option\", {\n    key: x.id,\n    value: x.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, x.name)))), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"+\"));\n}","map":{"version":3,"sources":["/home/i/code/Miami/graphql-playlist/client/src/componenets/AddBook.js"],"names":["React","useState","useQuery","getAuthorsQuery","AddBook","name","setName","genre","setGenre","authorId","setAuthorId","loading","error","data","changeHandler","e","state","console","log","target","value","authors","map","x","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAGA,eAAe,SAASC,OAAT,GAAmB;AAAA,oBACNH,QAAQ,CAAC,EAAD,CADF;AAAA;AAAA,QACvBI,IADuB;AAAA,QACjBC,OADiB;;AAAA,qBAEJL,QAAQ,CAAC,EAAD,CAFJ;AAAA;AAAA,QAEvBM,KAFuB;AAAA,QAEhBC,QAFgB;;AAAA,qBAGEP,QAAQ,CAAC,EAAD,CAHV;AAAA;AAAA,QAGvBQ,QAHuB;AAAA,QAGbC,WAHa;;AAAA,oBAKGR,QAAQ,CAACC,eAAD,CALX;AAAA,QAKtBQ,OALsB,aAKtBA,OALsB;AAAA,QAKbC,KALa,aAKbA,KALa;AAAA,QAKNC,IALM,aAKNA,IALM;;AAO9B,QAAMC,aAAa,GAAGC,CAAC,IAAI;AACvB,QAAIC,KAAK,GAAG,EAAZ;AACH,GAFD;;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkBD,KAAlB;AACA,SACI;AAAM,IAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAGG,CAAD,IAAKT,OAAO,CAACS,CAAC,CAACI,MAAF,CAASC,KAAV,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAMI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CANJ,EAWI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI;AAAQ,IAAA,IAAI,EAAC,EAAb;AAAgB,IAAA,EAAE,EAAC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADhB,EAEKC,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFd,EAGKC,IAAI,IAAIA,IAAI,CAACQ,OAAL,CAAaC,GAAb,CAAiBC,CAAC,IAAG;AAAQ,IAAA,GAAG,EAAGA,CAAC,CAACC,EAAhB;AAAoB,IAAA,KAAK,EAAED,CAAC,CAACC,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCD,CAAC,CAAClB,IAApC,CAArB,CAHb,CAFJ,CAXJ,EAoBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SApBJ,CADJ;AAwBH","sourcesContent":["import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getAuthorsQuery } from '../queries/querie';\n\n\nexport default function AddBook() {\n    const [name, setName] = useState('');\n    const [genre, setGenre] = useState('');\n    const [authorId, setAuthorId] = useState('')\n\n    const { loading, error, data } = useQuery(getAuthorsQuery);\n    \n    const changeHandler = e => {\n        let state = [];\n    }\n\n    console.log(data, error)\n    return (\n        <form id=\"add-book\">\n            <div className=\"field\">\n                <label>Book name:</label>\n                <input type=\"text\" onChange={(e)=>setName(e.target.value)}/>\n            </div>\n\n            <div className=\"field\">\n                <label>Genre:</label>\n                <input type=\"text\"/>\n            </div>\n\n            <div className=\"field\">\n                <label>Author:</label>\n                <select name=\"\" id=\"\">\n                    {loading && <option>Loading...</option>}\n                    {error && <option>Error :(</option>}\n                    {data && data.authors.map(x=> <option key ={x.id} value={x.id}>{x.name}</option>)}\n                </select>\n            </div>\n\n            <button>+</button>\n        </form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}