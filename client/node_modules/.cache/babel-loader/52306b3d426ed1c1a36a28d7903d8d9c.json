{"ast":null,"code":"import _slicedToArray from \"/home/i/code/Miami/graphql-playlist/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/i/code/Miami/graphql-playlist/client/src/componenets/AddBook.js\";\nimport React, { useMemo, useCallback, useState } from \"react\";\nimport { getAuthorsQuery, addBookMutation } from \"../queries/querie\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\n\nconst getOptions = (loading, error, data) => {\n  if (loading) {\n    return React.createElement(\"option\", {\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, \"Loading Authors...\");\n  } else if (error) {\n    return React.createElement(\"option\", {\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"Error loading Authors\");\n  } else {\n    return data.authors.map(({\n      name,\n      id\n    }) => {\n      return React.createElement(\"option\", {\n        key: id,\n        value: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, name);\n    });\n  }\n};\n\nconst AddBook = () => {\n  const _useQuery = useQuery(getAuthorsQuery),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        genre = _useState4[0],\n        setGenre = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        author = _useState6[0],\n        setAuthor = _useState6[1];\n\n  const _useMutation = useMutation(addBookMutation),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        addBook = _useMutation2[0],\n        book = _useMutation2[1];\n\n  const options = useMemo(() => getOptions(loading, error, data), [loading, error, data]);\n\n  const addCB = async e => {\n    e.preventDefault();\n    console.log(\"name: \".concat(name, \", genre: \").concat(genre, \", author: \").concat(author));\n    await addBook({\n      variables: {\n        name,\n        genre,\n        authorId: author\n      }\n    }).catch(err => console.log(err));\n    console.log(book);\n  };\n\n  console.log(data, error);\n  return React.createElement(\"form\", {\n    id: \"add-book\",\n    onSubmit: addCB,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Book name:\"), React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Genre:\"), React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => setGenre(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Author:\"), React.createElement(\"select\", {\n    onChange: e => setAuthor(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Select Author\"), options)), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"+\"));\n};\n\nexport default AddBook;","map":{"version":3,"sources":["/home/i/code/Miami/graphql-playlist/client/src/componenets/AddBook.js"],"names":["React","useMemo","useCallback","useState","getAuthorsQuery","addBookMutation","useQuery","useMutation","getOptions","loading","error","data","authors","map","name","id","AddBook","setName","genre","setGenre","author","setAuthor","addBook","book","options","addCB","e","preventDefault","console","log","variables","authorId","catch","err","target","value"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, useState } from \"react\";\nimport { getAuthorsQuery, addBookMutation } from \"../queries/querie\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\n\nconst getOptions = (loading, error, data) => {\n  if (loading) {\n    return <option disabled>Loading Authors...</option>;\n  } else if (error) {\n    return <option disabled>Error loading Authors</option>;\n  } else {\n    return data.authors.map(({ name, id }) => {\n      return (\n        <option key={id} value={id}>\n          {name}\n        </option>\n      );\n    });\n  }\n};\n\nconst AddBook = () => {\n  const { loading, error, data } = useQuery(getAuthorsQuery);\n  const [name, setName] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [addBook, book] = useMutation(addBookMutation);\n\n  const options = useMemo(() => getOptions(loading, error, data), [\n    loading,\n    error,\n    data\n  ]);\n\n  const addCB = async e => {\n    e.preventDefault();\n    console.log(`name: ${name}, genre: ${genre}, author: ${author}`);\n    await addBook({\n        variables: {name, genre, authorId: author}\n    }).catch(err => console.log(err))\n    console.log(book)\n  };\n  console.log(data, error);\n  return (\n    <form id=\"add-book\" onSubmit={addCB}>\n      <div className=\"field\">\n        <label>Book name:</label>\n        <input type=\"text\" onChange={e => setName(e.target.value)} />\n      </div>\n\n      <div className=\"field\">\n        <label>Genre:</label>\n        <input type=\"text\" onChange={e => setGenre(e.target.value)} />\n      </div>\n\n      <div className=\"field\">\n        <label>Author:</label>\n        <select onChange={e => setAuthor(e.target.value)}>\n          <option>Select Author</option>\n          {options}\n        </select>\n      </div>\n\n      <button>+</button>\n    </form>\n  );\n};\n\nexport default AddBook;\n"]},"metadata":{},"sourceType":"module"}