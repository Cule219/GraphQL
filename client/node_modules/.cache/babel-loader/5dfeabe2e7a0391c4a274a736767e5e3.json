{"ast":null,"code":"var _jsxFileName = \"/home/i/code/Miami/graphql-playlist/client/src/componenets/BookDetails.js\";\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getBookQuery } from '../queries/query';\nexport default function BookDetails(props) {\n  const _useQuery = useQuery(getBookQuery, {\n    skip: !props.bookId,\n    variables: {\n      id: props.bookId\n    } // options:(props)=>{\n    //     return{\n    //         variables:{\n    //             id:props.bookId\n    //         }\n    //     }\n    // }\n\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  console.log(props, data);\n  let content;\n  if (loading) content = React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Loading...\");else if (error) content = React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Error :(\");else if (!data) content = React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"No book selected\");else {\n    const _data$book = data.book,\n          name = _data$book.name,\n          genre = _data$book.genre,\n          author = _data$book.author;\n    const books = author.books.map(({\n      id,\n      name\n    }) => {\n      return React.createElement(\"li\", {\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, name);\n    });\n    content = React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, genre), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, author.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"All boooks by this author\"), React.createElement(\"ul\", {\n      className: \"other-books\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, books));\n  }\n  return React.createElement(\"div\", {\n    id: \"book-details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, content);\n}","map":{"version":3,"sources":["/home/i/code/Miami/graphql-playlist/client/src/componenets/BookDetails.js"],"names":["React","useQuery","getBookQuery","BookDetails","props","skip","bookId","variables","id","loading","error","data","console","log","content","book","name","genre","author","books","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAGA,eAAe,SAASC,WAAT,CAAsBC,KAAtB,EAA8B;AAAA,oBACRH,QAAQ,CAACC,YAAD,EAAe;AACpDG,IAAAA,IAAI,EAAE,CAACD,KAAK,CAACE,MADuC;AAEpDC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEJ,KAAK,CAACE;AAAZ,KAFyC,CAGpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAToD,GAAf,CADA;AAAA,QACjCG,OADiC,aACjCA,OADiC;AAAA,QACxBC,KADwB,aACxBA,KADwB;AAAA,QACjBC,IADiB,aACjBA,IADiB;;AAYzCC,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ,EAAmBO,IAAnB;AAEA,MAAIG,OAAJ;AACA,MAAIL,OAAJ,EAAaK,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAV,CAAb,KACK,IAAIJ,KAAJ,EAAWI,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAV,CAAX,KACA,IAAI,CAACH,IAAL,EAAWG,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAV,CAAX,KACA;AAAA,uBAGEH,IAHF,CAECI,IAFD;AAAA,UAESC,IAFT,cAESA,IAFT;AAAA,UAEeC,KAFf,cAEeA,KAFf;AAAA,UAEsBC,MAFtB,cAEsBA,MAFtB;AAIF,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAAP,CAAaC,GAAb,CAAiB,CAAC;AAAEZ,MAAAA,EAAF;AAAMQ,MAAAA;AAAN,KAAD,KAAkB;AAC9C,aAAO;AAAI,QAAA,GAAG,EAAER,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAcQ,IAAd,CAAP;AACF,KAFa,CAAd;AAGAF,IAAAA,OAAO,GACJ,0CACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKE,IAAL,CADH,EAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIC,KAAJ,CAFH,EAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIC,MAAM,CAACF,IAAX,CAHH,EAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAJH,EAKG;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,KAA7B,CALH,CADH;AASF;AACD,SAAO;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBL,OAAxB,CAAP;AACH","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getBookQuery } from '../queries/query';\n\n\nexport default function BookDetails( props ) {\n    const { loading, error, data } = useQuery(getBookQuery, {\n        skip: !props.bookId,\n        variables: { id: props.bookId }\n        // options:(props)=>{\n        //     return{\n        //         variables:{\n        //             id:props.bookId\n        //         }\n        //     }\n        // }\n    });\n    console.log(props, data)\n\n    let content;\n    if (loading) content = <p>Loading...</p>;\n    else if (error) content = <p>Error :(</p>;\n    else if (!data) content = <p>No book selected</p>;\n    else {\n       const {\n          book: { name, genre, author }\n       } = data;\n       const books = author.books.map(({ id, name }) => {\n          return <li key={id}>{name}</li>;\n       });\n       content = (\n          <>\n             <h2>{name}</h2>\n             <p>{genre}</p>\n             <p>{author.name}</p>\n             <p>All boooks by this author</p>\n             <ul className=\"other-books\">{books}</ul>\n          </>\n       );\n    }\n    return <div id=\"book-details\">{content}</div>;\n}"]},"metadata":{},"sourceType":"module"}